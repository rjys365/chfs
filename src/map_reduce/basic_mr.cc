#include <algorithm>
#include <cctype>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>

#include "map_reduce/protocol.h"

namespace mapReduce {
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
std::vector<KeyVal> Map(const std::string &content) {
  // Your code goes here
  // Hints: split contents into an array of words.
  std::string current_word;
  std::size_t pos = 0;
  std::size_t size = content.size();
  std::vector<KeyVal> ret;
  for (; pos < size; pos++) {
    char c = content[pos];
    if (isalpha(c)) {
      current_word.push_back(c);
    } else {
      if (current_word.size() > 0) {
        ret.emplace_back(current_word, "1");
        current_word.clear();
      }
    }
  }
  if (current_word.size() > 0) {
    ret.emplace_back(current_word, "1");
  }
  return ret;
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
std::string Reduce(const std::string &key,
                   const std::vector<std::string> &values) {
  // Your code goes here
  // Hints: return the number of occurrences of the word.
  int sum = 0;
  for (auto &num : values) {
    int num_int = std::stoi(num);
    sum += num_int;
  }
  std::string ret = std::to_string(sum);
  return ret;
}
}  // namespace mapReduce